# STACK : 개념 정리

[TOC]

# 스택

> 물건을 쌓아 올리듯 자료를 쌓아 올린 형태의 자료구조

## 특성

- 스택에 저장된 자료는 선형 구조를 갖는다.

    💡`선형구조` : 자료 간의 관계가 1대 1의 관계를 갖는다.
    💡`비선형구조` : 자료 간의 관계가 1대 N의 관계를 갖는다.

- 스택에 자료를 삽입하거나 스택에서 자료를 꺼낼 수 있다.
- 마지막에 삽입한 자료를 가장 먼저 꺼낸다. `후입선출(LIFO, Last-in-First-out)`이라고 부른다.
    
    - 예를 들어 스택에 1, 2, 3 순으로 자료를 삽입했다면, 꺼낼 때는 역순으로 3, 2, 1로 꺼낸다.

## 자료구조

💡`자료구조` : 자료를 선형으로 저장할 저장소

- C언어에서는 배열을 사용할 수 있다. Python에서는 리스트를 사용한다.
- 저장소 자체를 스택이라고 부르기도 한다.
- 스택에서 마지막 삽입된 원소의 위치를 `top`이라고 부른다.
    - C에서는 중요하나, Python에서는 크게 중요하지 않다.

## 연산

- `삽입` : 저장소에 자료를 저장한다. 보통 `push` 라고 부른다.
- `삭제` : 저장소에서 자료를 꺼낸다. 꺼낸 자료를 삽입한 자료의 역순으로 꺼낸다. 보통 `pop` 이라고 부른다.
- `isEmpty` : 스택이 공백인지 아닌지 확인하는 연산.
- `peek` : 스택의 top에 있는 item을 반환하는 연산.

## 구현

### Stack의 `push` 알고리즘

**C에서의 논리로**

```python
# 우선 크기가 정해진 배열을 만들어야 한다.
stack = [0] * 100
# 아직 0번째 인덱스에 아무것도 들어가 있지 않으므로, top은 -1이다.
top = -1

def push(item):
    # C에서의 배열은 크기가 정해져 있으므로, 해당 배열이 꽉 차지 않았는가 확인해야 한다. 이를 위해 top의 위치를 확인한다.
    # 전역변수로서 top을 사용할 예정이므로,
    global top

    # 만약 top이 99보다 크다면: 즉, 배열이 꽉 차있는 상태라면 return
    if top > 100 - 1:
        return
    # 그렇지 않다면: 즉, 배열에 여유가 있다면
    else:
        # top을 하나 증가시키고,
        top += 1
        # 증가시킨 자리에 주어진 원소를 집어넣는다.
        stack[top] = item
```

**Python에서는**

```python
s = []

def push(item):
    s.append(item)
```

### Stack의 `pop` 알고리즘

**C에서의 논리로**

```python
# 우선 크기가 정해진 배열을 만들어야 한다.
stack = [0] * 100
# 아직 0번째 인덱스에 아무것도 들어가 있지 않으므로, top은 -1이다.
top = -1

def pop():
    global top

    # top이 초기의 -1이라면: 아무것도 들어있지 않은 상태이므로
    if top == -1:
        print("Stack is Empty!")
        return
    # 그렇지 않다면: 즉, 스택에 원소가 들어 있는 상태라면
    else:
        # 결괏값으로는 현재 top이 있는 위치의 원소를 꺼내주고,
        result = stack[top]
        # top을 하나 감소시킨다.
        top -= 1
        return result
```

**Python에서는**

```python
s = []

def pop():
    if len(s) == 0:
        print("Stack is Empty!")
				return
    else: 
        return s.pop()
```

**더 간단하게**

```python
if stack:  # if len(stack) != 0
		print(stack.pop())
```

### 💡global? Python에서의 전역변수

- 파이썬에서는 `top`과 `stack` 이 모두 전역변수로 설정되어 있다.
- 단,
    - `stack`은 **참조형**이므로 R(읽기), W(쓰기) 두가지가 모두 가능하나,
    - `top`은 **값형**이므로 R(읽기)만 가능하다.
- 따라서 새로 정의한 함수 내에서 전역변수 top을 변경(W) 할 필요가 있을 때는 `global`로, 해당 함수 내에서의 scope로 국한되는 것이 아니라 전역변수 scope의 변수를 수정한다고 설정해주자.

## 주의사항

- **C에서** 1차원 배열을 사용하여 구현할 경우 구현이 용이하다는 장점이 있지만, 스택의 크기를 변경하기 어렵다는 단점이 있다.
    - 이를 해결하기 위한 방법으로, 저장소를 동적으로 할당하여 스택을 구현하는 방법이 있다. 동적 연결리스트를 이용하여 구현하는 방법을 의미한다. 구현이 복잡하다는 단점이 있지만 메모리를 효율적으로 사용한다는 장점을 가진다.

## 스택의 응용1 : 괄호 검사

- 괄호의 종류:
    - 대괄호 `[` `]`
    - 중괄호 `{` `}`
    - 소괄호 `(` `)`
- 조건
    1. 왼쪽 괄호의 개수와 오른쪽 괄호의 개수가 같아야 한다.
    2. 같은 괄호에서 왼쪽 괄호는 오른쪽 괄호보다 먼저 나와야 한다.
    3. 괄호 사이에는 포함 관계만 존재한다.
- 괄호를 검사하는 알고리즘 개요:
    - 문자열에 있는 괄호를 차례대로 조사하면서 왼쪽 괄호를 만나면 스택에 삽입하고, 오른쪽 괄호를 만나면 스택에서 top 괄호를 삭제한 후 오른쪽 괄호와 짝이 맞는지 검사한다.
    - 이 때, 스택이 비어 있으면 조건1 또는 조건 2에 위배되고 괄호의 짝이 맞지 않으면 조건 3에 위배된다.
    - 마지막 괄호까지 조사한 후에도 스택에 괄호가 남아있으면 조건 1에 위배된다.

### 풀이

```python
stack = []
arr = "()()((())))"

def check(arr):
    for i in range(len(arr)):
        # 왼쪽 괄호일 경우는 스택에 push
        if arr[i] == '(':
            stack.append(arr[i])
        # 오른쪽 괄호일 경우에는 스택에서 꺼내서 pop이되
        elif arr[i] == ')':
            # 스택이 비어있는지 검사를 선행하자
            if len(stack) == 0:
                return False
            else:
                stack.pop()
        # 끝까지 다 검사했을 때 스택에 괄호가 남아있다면:
        if stack: 
            return False
        else: 
            return True
```

## 스택의 응용 2: function call

- 프로그램에서의 함수 호출과 복귀에 따른 수행 순서를 관리
    - 가장 마지막에 호출된 함수가 가장 먼저 실행을 완료하고 복귀하는 후입선출 구조이므로, 후입선출 구조의 스택을 이용하여 수행순서 관리
    - 함수 호출이 발생하면 호출한 함수 수행에 필요한 지역변수, 매개변수 및 수행 후 복귀할 주소 등의 정보를 스택 프레임(stack frame)에 저장하여 시스템 스택에 삽입
    - 함수의 실행이 끝나면 시스템 스택의 top 원소(스택 프레임)를 삭제(pop) 하면서 프레임에 저장돼 있던 복귀주소를 확인하고 복귀
    - 함수 호출과 복귀에 따라 이 과정을 반복하여 전체 프로그램 수행이 종료되면 시스템 스택은 공백 스택이 된다.
